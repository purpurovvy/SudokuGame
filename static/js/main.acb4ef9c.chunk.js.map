{"version":3,"sources":["reportWebVitals.ts","global/globalValues.ts","sudokuLogic/fillGrid/fillGrid.ts","sudokuLogic/identifySquare/identifySquare.ts","sudokuLogic/createNewGrid/createNewGrid.ts","sudokuLogic/validations/column/columnValidation.ts","sudokuLogic/validations/row/rowValidation.ts","sudokuLogic/validations/square/squareValidation.ts","sudokuLogic/validations/grid/gridValidation.ts","sudokuLogic/shuffle/shuffle.ts","sudokuLogic/getRandomIndex/getRandomIndex.ts","sudokuLogic/copyGrid/copyGrid.ts","sudokuLogic/solveGrid/solveGrid.ts","sudokuLogic/removeNumbers/removeNumbers.ts","sudokuLogic/compareArrays/compareArrays.ts","utils/regex/regexPatterns.ts","sudokuLogic/createCustomTemplate/createCustomTemplate.ts","store/types.ts","store/reducers.ts","store/actions.ts","global/styles/global.ts","components/Block/useBlock.ts","components/Block/BlockStyled.ts","components/Block/Block.tsx","components/Grid/useGrid.ts","components/Grid/GridStyled.ts","components/Grid/Grid.tsx","components/NumberPanel/NumberPanel.tsx","components/NumberButton/useNumberButton.ts","components/NumberButton/NumberButton.tsx","components/ValidationButton/useValidationButton.ts","components/ValidationButton/ValidationButton.tsx","components/SudokuTemplate/SudokuTemplateStyled.ts","components/SudokuTemplate/useSudokuTemplate.ts","utils/regex/useRegex.ts","components/SudokuTemplate/SudokuTemplate.tsx","components/NavigationPanel/NavigationPanel.tsx","components/MainPane/MainPane.tsx","components/SudokuTemplateButton/useSudokuTemplateButton.ts","components/SudokuTemplateButton/SudokuTemplateButton.tsx","components/Notification/NotificationStyled.ts","components/Notification/Notification.tsx","components/styledComponents/Button.ts","components/styledComponents/Card.ts","components/styledComponents/Content.ts","components/styledComponents/Title.ts","components/styledComponents/GridContainer.ts","components/styledComponents/CardTitle.ts","components/styledComponents/DefaultText.ts","components/styledComponents/ContentHorizontal.ts","index.tsx","store/index.ts","global/styles/theme.ts"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","globalValues","counter","blocksAmount","numbers","fillGrid","grid","row","col","i","Math","floor","shuffle","value","isInRow","isInCol","square","identifySquare","isInSquare","gridValidation","pushFirstLine","index","push","pushSecondLine","pushThirdLine","createNewGrid","customGridInput","template","createCustomTemplate","includes","j","array","length","random","getRandomIndex","copyGrid","map","x","slice","solveGrid","removeNumbers","attempts","backup","gridCopy","compareArrays","arr1","arr2","Array","isArray","len","regexPatterns","forEach","item","customValues","replace","customRow","charAt","customCol","customBlockValue","parseInt","CREATE_GRID","SELECT_BLOCK","UNSELECT_BLOCK","FILL_BLOCK","ENABLE_VALIDATION","DISABLE_VALIDATION","DISPLAY_SUDOKU_TEMPLATE","HIDE_SUDOKU_TEMPLATE","initialState","reducer","state","action","type","types","customTemplate","payload","gridTemplate","solvedGrid","challengeGrid","workingGrid","isValidationMode","isSudokuTemplateOpen","coords","alert","selectedBlock","undefined","createGrid","unselectBlock","hideSudokuTemplate","GlobalStyles","createGlobalStyle","theme","css","colors","background","black","useBlock","colIndex","rowIndex","validateInput","useSelector","isActive","isPuzzle","isValid","dispatch","useDispatch","handleClick","BlockStyled","styled","div","darkgray","blue","white","transition","lightBlue","Block","onClick","useGrid","create","useCallback","GridContainerStyled","RowStyled","Grid","useEffect","Children","toArray","_","NumberPanel","GridContainer","useNumberButton","selectedValue","fill","fillBlock","NumberButton","Button","useValidationButton","toggleValidation","ValidationButton","SudokuTemplateStyled","TemplateInputStyled","textarea","SudokuTemplateFormStyled","form","useSudokuTemplate","regex","useState","errorMessage","setErrorMessage","setTemplate","blockValidation","textInput","check","match","filterValidInputs","input","allowedSudokuValues","Object","keys","filter","key","validKey","submitCustomTemplate","event","preventDefault","parsedInput","sudokuTemplateInput","sudokuTemplateObj","JSON","parse","values","error","console","handleTextInputChange","e","target","closeCard","SudokuTemplate","Card","mode","isVisible","label","CardTitle","DefaultText","onChange","ContentHorizontal","NavigationPanel","MainPane","Content","Title","useSudokuTemplateButton","toggleSudokuTemplate","SudokuTemplateButton","NotificationStyled","success","warning","borderRadius","shadow","Notification","button","h1","p","store","createStore","devToolsEnhancer","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acb4ef9c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const globalValues = {\r\n  counter: 0,\r\n  blocksAmount: 81,\r\n};\r\n","import { TGrid, TDigits } from 'global/typings';\r\nimport { isInCol, isInRow, shuffle, identifySquare, isInSquare, gridValidation } from '../';\r\nimport { globalValues } from 'global/globalValues';\r\n\r\nconst numbers: TDigits[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n/**\r\n * A backtracking/recursive function to check all the possible combinations of numbers a solution is found\r\n * @param grid  9X9 Sudoku Grid\r\n */\r\nexport const fillGrid = (grid: TGrid) => {\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < globalValues.blocksAmount; i++) {\r\n    row = Math.floor(i / 9);\r\n    col = i % 9;\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers);\r\n      for (let value of numbers) {\r\n        if (!isInRow({ grid, row, value })) {\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ col, grid, row });\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value;\r\n              if (gridValidation(grid)) return grid;\r\n              else if (fillGrid(grid)) {\r\n                return grid;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    continue;\r\n  }\r\n  grid[row][col] = 0;\r\n};\r\n","import { TGrid, TSquare } from 'global/typings';\r\n\r\ninterface IInput {\r\n  grid: TGrid;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\n/**\r\n * A function that identifies and returns the current square of a given sudoku grid at a row and column index.\r\n * @param input Object with 9X9 Sudoku Grid, row index and column index\r\n */\r\nexport const identifySquare = ({ col, grid, row }: IInput): TSquare => {\r\n  const pushFirstLine = (square: any[], index: number) => square.push([grid[index][0], grid[index][1], grid[index][2]]);\r\n  const pushSecondLine = (square: any[], index: number) =>\r\n    square.push([grid[index][3], grid[index][4], grid[index][5]]);\r\n  const pushThirdLine = (square: any[], index: number) => square.push([grid[index][6], grid[index][7], grid[index][8]]);\r\n  const square = [] as any[];\r\n\r\n  if (row < 3) {\r\n    if (col < 3) for (let index = 0; index < 3; index++) pushFirstLine(square, index);\r\n    else if (col < 6) for (let index = 0; index < 3; index++) pushSecondLine(square, index);\r\n    else for (let index = 0; index < 3; index++) pushThirdLine(square, index);\r\n  } else if (row < 6) {\r\n    if (col < 3) for (let index = 3; index < 6; index++) pushFirstLine(square, index);\r\n    else if (col < 6) for (let index = 3; index < 6; index++) pushSecondLine(square, index);\r\n    else for (let index = 3; index < 6; index++) pushThirdLine(square, index);\r\n  } else {\r\n    if (col < 3) for (let index = 6; index < 9; index++) pushFirstLine(square, index);\r\n    else if (col < 6) for (let index = 6; index < 9; index++) pushSecondLine(square, index);\r\n    else for (let index = 6; index < 9; index++) pushThirdLine(square, index);\r\n  }\r\n  return square as TSquare;\r\n};\r\n","import { TGrid } from 'global/typings';\r\nimport { createCustomTemplate } from '../';\r\n\r\n/**\r\n * A function that create grid with 0 || given values\r\n * @param customGridInput array of strings which contains information about [row][col]:value\r\n */\r\nexport const createNewGrid = (customGridInput?: string[]): TGrid => {\r\n  const template: TGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n  if (customGridInput) {\r\n    createCustomTemplate(customGridInput, template);\r\n  }\r\n  return template;\r\n};\r\n","import { TGrid, TDigits } from 'global/typings';\r\n\r\ninterface IIsInCol {\r\n  col: number;\r\n  grid: TGrid;\r\n  value: TDigits;\r\n}\r\n\r\nexport const isInCol = ({ col, grid, value }: IIsInCol): boolean => {\r\n  for (let i = 0; i < 9; i++) if (value === grid[i][col]) return true;\r\n  return false;\r\n};\r\n","import { TGrid, TDigits } from 'global/typings';\r\n\r\ninterface IIsInRow {\r\n  grid: TGrid;\r\n  row: number;\r\n  value: TDigits;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid row.\r\n * @param input Object with 9x9 Sudoku Grid, row index and value\r\n */\r\n\r\nexport const isInRow = ({ grid, row, value }: IIsInRow): boolean => {\r\n  return grid[row].includes(value);\r\n};\r\n","import { TDigits, TSquare } from 'global/typings';\r\n\r\ninterface IIsInSquare {\r\n  square: TSquare;\r\n  value: TDigits;\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid square.\r\n * @param input Object with 3X# Square and value.\r\n */\r\nexport const isInSquare = ({ square, value }: IIsInSquare): boolean => {\r\n  return [...square[0], ...square[1], ...square[2]].includes(value);\r\n};\r\n","import { TGrid } from 'global/typings';\r\n\r\n/**\r\n * A function to check if the grid is full\r\n * @param grid A 9X9 Sudoku Grid\r\n */\r\n\r\nexport const gridValidation = (grid: TGrid): boolean => {\r\n  for (let i = 0; i < 9; i++) for (let j = 0; j < 9; j++) if (grid[i][j] === 0) return false;\r\n  return true;\r\n};\r\n","/**\r\n * An array shuffling using the Fisher-Yates shuffle alogrithm\r\n * @param array An array that you want shuffled\r\n */\r\n\r\nexport const shuffle = (array: any[]) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n","/**\r\n * Return a random sudokue grid index in the 0 = 8 range\r\n */\r\nexport const getRandomIndex = () => {\r\n  return Math.floor(Math.random() * Math.floor(9));\r\n};\r\n","import { TGrid } from 'global/typings';\r\n\r\n/**\r\n * A function which takes grid and return clone of the input\r\n * @param grid first array to be compared\r\n */\r\nexport const copyGrid = (grid: TGrid): TGrid => {\r\n  const gridCopy = grid.map((x) => x.slice()) as TGrid;\r\n  return gridCopy;\r\n};\r\n","import { globalValues } from 'global/globalValues';\r\nimport { TGrid, TDigits } from 'global/typings';\r\nimport { gridValidation, identifySquare, isInCol, isInRow, isInSquare } from '../';\r\n\r\nconst numbers: TDigits[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n/**\r\n * A backtracking/recursive function to check all possible combinations of numbers until a solution is found\r\n * @param grid A 9X9 array consisting of values from 0-9)\r\n */\r\nexport const solveGrid = (grid: TGrid) => {\r\n  let row = 0;\r\n  let col = 0;\r\n\r\n  for (let i = 0; i < globalValues.blocksAmount; i++) {\r\n    row = Math.floor(i / 9);\r\n    col = i % 9;\r\n\r\n    if (grid[row][col] === 0) {\r\n      for (let value of numbers)\r\n        if (!isInRow({ grid, row, value }))\r\n          if (!isInCol({ col, grid, value })) {\r\n            const square = identifySquare({ col, grid, row });\r\n            if (!isInSquare({ square, value })) {\r\n              grid[row][col] = value;\r\n              if (gridValidation(grid)) {\r\n                globalValues.counter++;\r\n                break;\r\n              } else if (solveGrid(grid)) return true;\r\n            }\r\n          }\r\n      break;\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0;\r\n};\r\n","import { globalValues } from 'global/globalValues';\r\nimport { TGrid } from 'global/typings';\r\nimport { copyGrid, getRandomIndex, solveGrid } from '../';\r\n\r\n/**\r\n * Removes numbers from a full grid to create a Sudoku Puzzle.\r\n * @param grid 9X9 Sudoku Grid\r\n * @param attempts number of attempts to solve (higher means more difficult) - default 5\r\n */\r\nexport const removeNumbers = (grid: TGrid, attempts = 5): TGrid => {\r\n  while (attempts > 0) {\r\n    let row = getRandomIndex();\r\n    let col = getRandomIndex();\r\n\r\n    while (grid[row][col] === 0) {\r\n      row = getRandomIndex();\r\n      col = getRandomIndex();\r\n    }\r\n\r\n    const backup = grid[row][col];\r\n    grid[row][col] = 0;\r\n\r\n    const gridCopy = copyGrid(grid);\r\n\r\n    globalValues.counter = 0;\r\n    solveGrid(gridCopy);\r\n\r\n    if (globalValues.counter !== 1) {\r\n      grid[row][col] = backup;\r\n      attempts--;\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n","/**\r\n * Compare two arrays (of any dimensions) and returns true if they are equal, other returns false\r\n * @param arr1 first array to be compared\r\n * @param arr2 second array to be compared\r\n */\r\nexport const compareArrays = (arr1: any[], arr2: any[]): boolean => {\r\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) return arr1 === arr2;\r\n\r\n  if (arr1.length !== arr2.length) return false;\r\n\r\n  for (let i = 0, len = arr1.length; i < len; i++) if (!compareArrays(arr1[i], arr2[i])) return false;\r\n\r\n  return true;\r\n};\r\n","export const regexPatterns = {\r\n  sudokuBlockPointer: /(^\\[[0-8]\\]\\[[0-8]\\]$)/g,\r\n  filterDigits: /\\D+/g,\r\n};\r\n","import { TDigitsZeroIncluded, TGrid } from 'global/typings';\r\nimport { regexPatterns } from '../../utils';\r\n\r\n/**\r\n * A function which takes values and grid then return it with given input\r\n * @param customGridInput array of strings which contains information about [row][col]:value\r\n * @param template grid template which will be modified\r\n */\r\n\r\nexport const createCustomTemplate = (customGridInput: string[], template: TGrid) => {\r\n  customGridInput.forEach((item: any) => {\r\n    const customValues = item.replace(regexPatterns.filterDigits, '');\r\n    const correctLength = 3; // customValues should contains 3 digits: row - col - value\r\n    if (customValues.length !== correctLength) {\r\n      return;\r\n    }\r\n    const customRow = customValues.charAt(0);\r\n    const customCol = customValues.charAt(1);\r\n    const customBlockValue = customValues.charAt(2);\r\n    template[customRow][customCol] = parseInt(customBlockValue) as TDigitsZeroIncluded;\r\n  });\r\n};\r\n","export const CREATE_GRID = 'CREATE_GRID';\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK';\r\nexport const UNSELECT_BLOCK = 'UNSELECT_BLOCK';\r\nexport const FILL_BLOCK = 'FILL_BLOCK';\r\nexport const ENABLE_VALIDATION = 'ENABLE_VALIDATION';\r\nexport const DISABLE_VALIDATION = 'DISABLE_VALIDATION';\r\nexport const DISPLAY_SUDOKU_TEMPLATE = 'DISPLAY_SUDOKU_TEMPLATE';\r\nexport const HIDE_SUDOKU_TEMPLATE = 'HIDE_SUDOKU_TEMPLATE ';\r\n","import { AnyAction } from 'redux';\r\nimport { createNewGrid, removeNumbers, copyGrid, compareArrays, fillGrid } from 'sudokuLogic';\r\nimport { TGrid } from 'global/typings';\r\nimport { IReducer } from './interfaces';\r\nimport * as types from './types';\r\n\r\nconst initialState: IReducer = {};\r\n\r\nexport const reducer = (state = initialState, action: AnyAction): IReducer => {\r\n  switch (action.type) {\r\n    case types.CREATE_GRID: {\r\n      const customTemplate = action.payload;\r\n      const gridTemplate = createNewGrid(customTemplate);\r\n      const solvedGrid = fillGrid(copyGrid(gridTemplate));\r\n      const challengeGrid = solvedGrid && !customTemplate ? removeNumbers(copyGrid(solvedGrid)) : gridTemplate;\r\n      const workingGrid = copyGrid(challengeGrid);\r\n      const isValidationMode = false;\r\n      const isSudokuTemplateOpen = false;\r\n\r\n      return {\r\n        ...state,\r\n        challengeGrid,\r\n        solvedGrid,\r\n        workingGrid,\r\n        isValidationMode,\r\n        isSudokuTemplateOpen,\r\n      };\r\n    }\r\n\r\n    case types.FILL_BLOCK: {\r\n      if (state.workingGrid && state.solvedGrid) {\r\n        state.workingGrid[action.coords[0]][action.coords[1]] = action.value;\r\n        if (compareArrays(state.workingGrid, state.solvedGrid)) alert('Completed!');\r\n        return { ...state, workingGrid: [...state.workingGrid] as TGrid };\r\n      }\r\n      return state;\r\n    }\r\n\r\n    case types.SELECT_BLOCK:\r\n      return { ...state, selectedBlock: action.coords };\r\n\r\n    case types.UNSELECT_BLOCK:\r\n      return { ...state, selectedBlock: undefined };\r\n\r\n    case types.ENABLE_VALIDATION:\r\n      return { ...state, isValidationMode: true };\r\n\r\n    case types.DISABLE_VALIDATION:\r\n      return { ...state, isValidationMode: false };\r\n\r\n    case types.DISPLAY_SUDOKU_TEMPLATE:\r\n      return { ...state, isSudokuTemplateOpen: true };\r\n\r\n    case types.HIDE_SUDOKU_TEMPLATE:\r\n      return { ...state, isSudokuTemplateOpen: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Action, AnyAction } from 'redux';\r\nimport { ICreateGridAction } from './interfaces';\r\nimport { TBlockCoords, TDigits } from 'global/typings';\r\n\r\nimport * as types from './types';\r\n\r\nexport const createGrid = (payload?: any): ICreateGridAction => ({ type: types.CREATE_GRID, payload });\r\n\r\nexport const fillBlock = (value: TDigits, coords: TBlockCoords): AnyAction => ({\r\n  coords,\r\n  type: types.FILL_BLOCK,\r\n  value,\r\n});\r\nexport const selectBlock = (coords: TBlockCoords): AnyAction => ({\r\n  coords,\r\n  type: types.SELECT_BLOCK,\r\n});\r\n\r\nexport const unselectBlock = (): AnyAction => ({\r\n  type: types.UNSELECT_BLOCK,\r\n});\r\n\r\nexport const enableValidation = (): Action => ({ type: types.ENABLE_VALIDATION });\r\nexport const disableValidation = (): Action => ({ type: types.DISABLE_VALIDATION });\r\nexport const displaySudokuTemplate = (): Action => ({ type: types.DISPLAY_SUDOKU_TEMPLATE });\r\nexport const hideSudokuTemplate = (): Action => ({ type: types.HIDE_SUDOKU_TEMPLATE });\r\n","import { createGlobalStyle, css } from 'styled-components';\r\nimport { themeType } from './theme';\r\n\r\nexport const GlobalStyles = createGlobalStyle<{ theme: themeType }>`\r\n  ${({ theme }) => css`\r\n    html {\r\n      font-size: 16px;\r\n      height: 100vh;\r\n      max-height: -webkit-fill-available;\r\n\r\n      body {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        margin: 0;\r\n\r\n        #root {\r\n          background: ${theme.colors.background};\r\n          color: ${theme.colors.black};\r\n          display: flex;\r\n          font-family: sans-serif;\r\n          height: 100%;\r\n          justify-content: center;\r\n        }\r\n      }\r\n    }\r\n  `}\r\n`;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { IReducer, selectBlock, unselectBlock } from 'store';\r\nimport { TDigitsZeroIncluded, TGrid, TIndex } from 'global/typings';\r\n\r\nexport interface IBlock {\r\n  colIndex: TIndex;\r\n  rowIndex: TIndex;\r\n}\r\n\r\ninterface IStateBlock {\r\n  isActive: boolean;\r\n  value: TDigitsZeroIncluded;\r\n  isPuzzle: boolean;\r\n  isValid: boolean;\r\n}\r\n\r\nexport const useBlock = ({ colIndex, rowIndex }: IBlock) => {\r\n  const validateInput = (workingGrid?: TGrid, solvedGrid?: TGrid, isValidationMode?: boolean): boolean => {\r\n    if (isValidationMode && workingGrid && solvedGrid) {\r\n      if (solvedGrid[rowIndex][colIndex] !== workingGrid[rowIndex][colIndex] && workingGrid[rowIndex][colIndex] !== 0) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const state = useSelector<IReducer, IStateBlock>(\r\n    ({ challengeGrid, workingGrid, selectedBlock, isValidationMode, solvedGrid }) => ({\r\n      isActive: selectedBlock ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex : false,\r\n      isPuzzle: challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n      value: workingGrid ? workingGrid[rowIndex][colIndex] : 0,\r\n      isValid: validateInput(workingGrid, solvedGrid, isValidationMode),\r\n    }),\r\n  );\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  const handleClick = () => {\r\n    if (!state.isActive && !state.isPuzzle) {\r\n      dispatch(selectBlock([rowIndex, colIndex]));\r\n    }\r\n    if (state.isActive && !state.isPuzzle) {\r\n      dispatch(unselectBlock());\r\n    }\r\n  };\r\n  return {\r\n    handleClick,\r\n    isActive: state.isActive,\r\n    isPuzzle: state.isPuzzle,\r\n    isValid: state.isValid,\r\n    value: state.value,\r\n  };\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\ninterface IBlockStyled {\r\n  isActive?: boolean;\r\n  isPuzzle?: boolean;\r\n  isValid?: boolean;\r\n}\r\nexport const BlockStyled = styled.div<IBlockStyled>`\r\n  ${({ isActive, isPuzzle, isValid, theme }) => css`\r\n    align-items: center;\r\n    background-color: ${isPuzzle ? theme.colors.darkgray : isActive ? theme.colors.blue : theme.colors.white};\r\n    border: solid 0.0625rem ${theme.colors.black};\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    flex-basis: 0;\r\n    font-size: 1.25rem;\r\n    font-weight: ${isPuzzle ? 'bold' : 'normal'};\r\n    color: ${isValid ? (isPuzzle ? 'white' : 'black') : 'red'};\r\n    height: auto;\r\n    justify-content: center;\r\n    transition: ${theme.transition};\r\n    user-select: none;\r\n    position: relative;\r\n\r\n    &:before {\r\n      padding-top: 100%;\r\n      content: '';\r\n      float: left;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: ${!isPuzzle && theme.colors.lightBlue};\r\n      cursor: ${isPuzzle && 'not-allowed'};\r\n    }\r\n  `}\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { NumberPanel } from 'components';\r\nimport { useBlock } from './useBlock';\r\nimport { BlockStyled } from './BlockStyled';\r\nimport { IBlock } from './useBlock';\r\n\r\nexport const Block: FC<IBlock> = ({ colIndex, rowIndex }) => {\r\n  const { handleClick, isActive, isPuzzle, isValid, value } = useBlock({ colIndex, rowIndex });\r\n  return (\r\n    <>\r\n      <BlockStyled isActive={isActive} onClick={handleClick} isPuzzle={isPuzzle} isValid={isValid}>\r\n        {value === 0 ? '' : value}\r\n        {isActive && <NumberPanel />}\r\n      </BlockStyled>\r\n    </>\r\n  );\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { createGrid, IReducer } from 'store';\r\nimport { TGrid } from 'global/typings';\r\n\r\ninterface IStateGrid {\r\n  solvedGrid?: TGrid;\r\n}\r\n\r\nexport const useGrid = () => {\r\n  const state = useSelector<IReducer, IStateGrid>(({ solvedGrid }) => ({\r\n    solvedGrid,\r\n  }));\r\n  const dispatch = useDispatch<Dispatch>();\r\n  const create = useCallback(() => dispatch(createGrid()), [dispatch]);\r\n\r\n  return { solvedGrid: state.solvedGrid, createGrid: create };\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const GridContainerStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0.625rem 0;\r\n`;\r\n\r\nexport const RowStyled = styled.div`\r\n  ${({ theme }) => css`\r\n    display: flex;\r\n    flex-flow: row;\r\n\r\n    &:nth-child(1) {\r\n      & > div {\r\n        border-top: solid 0.25rem ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(3),\r\n    &:nth-child(6) {\r\n      & > div {\r\n        border-bottom: solid 0.1875rem ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(9) {\r\n      border-bottom: solid 0.25rem ${theme.colors.black};\r\n    }\r\n\r\n    & > div {\r\n      &:nth-child(1) {\r\n        border-left: solid 0.25rem ${theme.colors.black};\r\n      }\r\n      &:nth-child(3),\r\n      &:nth-child(6),\r\n      &:nth-child(9) {\r\n        border-right: solid 0.25rem ${theme.colors.black};\r\n      }\r\n      &:nth-child(4),\r\n      &:nth-child(7) {\r\n        border-left: none;\r\n      }\r\n    }\r\n  `}\r\n`;\r\n","import React, { FC, Children, useEffect } from 'react';\r\nimport { TIndex } from 'global/typings';\r\nimport { useGrid } from './useGrid';\r\nimport { Block } from '../';\r\nimport { GridContainerStyled, RowStyled } from './GridStyled';\r\n\r\nexport const Grid: FC = () => {\r\n  const { solvedGrid, createGrid } = useGrid();\r\n\r\n  useEffect(() => {\r\n    if (!solvedGrid) {\r\n      createGrid();\r\n    }\r\n  }, [createGrid, solvedGrid]);\r\n\r\n  return (\r\n    <GridContainerStyled>\r\n      {Children.toArray(\r\n        [...Array(9)].map((_, rowIndex) => (\r\n          <RowStyled>\r\n            {Children.toArray(\r\n              [...Array(9)].map((_, colIndex) => <Block colIndex={colIndex as TIndex} rowIndex={rowIndex as TIndex} />),\r\n            )}\r\n          </RowStyled>\r\n        )),\r\n      )}\r\n    </GridContainerStyled>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { TDigits } from 'global/typings';\r\nimport { S, NumberButton } from 'components';\r\n\r\nexport const NumberPanel: FC = () => (\r\n  <S.GridContainer>\r\n    {([1, 2, 3, 4, 5, 6, 7, 8, 9] as TDigits[]).map((value) => (\r\n      <NumberButton key={value} value={value} />\r\n    ))}\r\n  </S.GridContainer>\r\n);\r\n","import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { fillBlock, IReducer } from 'store';\r\nimport { TBlockCoords, TDigitsZeroIncluded, TDigits } from 'global/typings';\r\n\r\nexport interface INumberButton {\r\n  value: TDigits;\r\n}\r\n\r\ninterface IStateNumberButton {\r\n  selectedBlock?: TBlockCoords;\r\n  selectedValue: TDigitsZeroIncluded;\r\n}\r\n\r\nexport const useNumberButton = ({ value }: INumberButton) => {\r\n  const state = useSelector<IReducer, IStateNumberButton>(({ selectedBlock, workingGrid }) => ({\r\n    selectedBlock,\r\n    selectedValue: workingGrid && selectedBlock ? workingGrid[selectedBlock[0]][selectedBlock[1]] : 0,\r\n  }));\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  const fill = useCallback(() => {\r\n    if (state.selectedBlock) dispatch(fillBlock(value, state.selectedBlock));\r\n  }, [dispatch, state.selectedBlock, value]);\r\n\r\n  return { fill };\r\n};\r\n","import React, { FC } from 'react';\r\nimport { S } from 'components';\r\nimport { useNumberButton, INumberButton } from './useNumberButton';\r\n\r\nexport const NumberButton: FC<INumberButton> = ({ value }) => {\r\n  const { fill } = useNumberButton({ value });\r\n  return <S.Button onClick={fill}>{value}</S.Button>;\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { IReducer, disableValidation, enableValidation } from 'store';\r\n\r\ninterface IStateValidationButton {\r\n  isValidationMode?: boolean;\r\n}\r\n\r\nexport const useValidationButton = () => {\r\n  const state = useSelector<IReducer, IStateValidationButton>(({ isValidationMode }) => ({\r\n    isValidationMode: isValidationMode,\r\n  }));\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  const toggleValidation = () => {\r\n    state.isValidationMode ? dispatch(disableValidation()) : dispatch(enableValidation());\r\n  };\r\n  return { toggleValidation, isValidationMode: state.isValidationMode };\r\n};\r\n","import React, { FC } from 'react';\r\nimport { S } from 'components';\r\nimport { useValidationButton } from './useValidationButton';\r\n\r\nexport const ValidationButton: FC = () => {\r\n  const { toggleValidation, isValidationMode } = useValidationButton();\r\n  return <S.Button onClick={toggleValidation}>{isValidationMode ? 'Validate: ON' : 'Validate: OFF'}</S.Button>;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const SudokuTemplateStyled = styled.div`\r\n  width: 100%;\r\n  height: auto;\r\n  position: absolute;\r\n  z-index: 100;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const TemplateInputStyled = styled.textarea`\r\n  margin: 0.5rem;\r\n  border: solid 0.125rem black;\r\n  resize: none;\r\n  width: 100%;\r\n  min-height: 50vh;\r\n  overflow-x: hidden;\r\n`;\r\n\r\nexport const SudokuTemplateFormStyled = styled.form`\r\n  display: flex;\r\n  flexdirection: column;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useRegex, regexPatterns } from 'utils';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createGrid, hideSudokuTemplate } from 'store';\r\n\r\nexport const useSudokuTemplate = () => {\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [template, setTemplate] = useState(`{\r\n    \"[1][1]\": 1,\r\n    \"[1][2]\": 2,\r\n    \"[5][5]\": 6,\r\n    \"[4][7]\": 9\r\n}`);\r\n  const dispatch = useDispatch<Dispatch>();\r\n  const blockValidation = useRegex(regexPatterns.sudokuBlockPointer);\r\n  const validateInput = (sudokuTemplateInput: string) => {\r\n    try {\r\n      const sudokuTemplateObj = JSON.parse(sudokuTemplateInput);\r\n      const values = filterValidInputs(sudokuTemplateObj);\r\n      if (Object.keys(values).length === 0) {\r\n        const errorMsg = \"Input doesn't have valid values\";\r\n        throw errorMsg;\r\n      }\r\n      return values;\r\n    } catch (error) {\r\n      setErrorMessage(typeof error === 'string' ? error : \"Your template doesn't fit schema\");\r\n      console.error(error);\r\n    }\r\n  };\r\n  const filterValidInputs = (input: { [key: string]: string }) => {\r\n    const allowedSudokuValues = { min: 0, max: 9 };\r\n    const listOfInputKeys = Object.keys(input)\r\n      .filter((key) => blockValidation(key))\r\n      .filter((validKey) => {\r\n        const value = parseInt(input[validKey]);\r\n        return value >= allowedSudokuValues.min && value <= allowedSudokuValues.max;\r\n      })\r\n      .map((key) => `${key}:${input[key]}`);\r\n\r\n    return listOfInputKeys;\r\n  };\r\n\r\n  const closeCard = (): void => {\r\n    dispatch(hideSudokuTemplate());\r\n  };\r\n\r\n  const submitCustomTemplate = (event?: React.SyntheticEvent): void => {\r\n    setErrorMessage('');\r\n    event?.preventDefault();\r\n    const parsedInput = validateInput(template);\r\n    if (parsedInput) {\r\n      dispatch(createGrid(parsedInput));\r\n    }\r\n  };\r\n\r\n  const handleTextInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    setTemplate(e.target.value);\r\n  };\r\n\r\n  return { template, errorMessage, submitCustomTemplate, handleTextInputChange, closeCard };\r\n};\r\n","type UseRegex = (regex: RegExp) => (textInput: string) => boolean;\r\n/**\r\n * A function which generate validator for specific regex\r\n * @param regex regex pattern for validation\r\n */\r\nexport const useRegex: UseRegex = (regex) => {\r\n  const checkRegex = (textInput: string) => {\r\n    const check = textInput && textInput.match(regex);\r\n    return textInput ? !!check : true;\r\n  };\r\n\r\n  return checkRegex;\r\n};\r\n","import React from 'react';\r\nimport { SudokuTemplateStyled, TemplateInputStyled, SudokuTemplateFormStyled } from './SudokuTemplateStyled';\r\nimport { S, Notification } from 'components';\r\nimport { useSudokuTemplate } from './useSudokuTemplate';\r\n\r\nexport const SudokuTemplate = () => {\r\n  const { template, errorMessage, submitCustomTemplate, handleTextInputChange, closeCard } = useSudokuTemplate();\r\n  return (\r\n    <SudokuTemplateStyled>\r\n      <S.Card>\r\n        <Notification mode={'error'} isVisible={!!errorMessage} label={errorMessage} />\r\n        <S.CardTitle>Paste your Sudoku template</S.CardTitle>\r\n        <S.DefaultText>\r\n          You can import your own sudoku template! Remember to provide right schema in JSON format. See example below.\r\n        </S.DefaultText>\r\n        <SudokuTemplateFormStyled>\r\n          <TemplateInputStyled onChange={handleTextInputChange} value={template} />\r\n        </SudokuTemplateFormStyled>\r\n        <S.ContentHorizontal>\r\n          <S.Button onClick={submitCustomTemplate}>Import</S.Button>\r\n          <S.Button onClick={closeCard}>Cancel</S.Button>\r\n        </S.ContentHorizontal>\r\n      </S.Card>\r\n    </SudokuTemplateStyled>\r\n  );\r\n};\r\n","import { S, ValidationButton, SudokuTemplateButton } from 'components';\r\nimport React from 'react';\r\nimport { useGrid } from '../Grid/useGrid';\r\n\r\nexport const NavigationPanel = () => {\r\n  const { createGrid } = useGrid();\r\n\r\n  return (\r\n    <S.ContentHorizontal>\r\n      <S.Button onClick={createGrid}>New Game</S.Button>\r\n      <ValidationButton />\r\n      <SudokuTemplateButton />\r\n    </S.ContentHorizontal>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { S, SudokuTemplate, Grid, NavigationPanel } from 'components';\r\nimport { useSelector } from 'react-redux';\r\nimport { IReducer } from 'store';\r\n\r\ninterface IStateMainPane {\r\n  isSudokuTemplateOpen?: boolean;\r\n}\r\n\r\nexport const MainPane = () => {\r\n  const state = useSelector<IReducer, IStateMainPane>(({ isSudokuTemplateOpen }) => ({\r\n    isSudokuTemplateOpen,\r\n  }));\r\n  return (\r\n    <S.Content>\r\n      <S.Title>Sudoku</S.Title>\r\n      <S.Card>\r\n        <NavigationPanel />\r\n        <Grid />\r\n      </S.Card>\r\n      {state.isSudokuTemplateOpen && <SudokuTemplate />}\r\n    </S.Content>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { IReducer, displaySudokuTemplate, hideSudokuTemplate, unselectBlock } from 'store';\r\n\r\ninterface IStateSudokuTemplateButton {\r\n  isSudokuTemplateOpen?: boolean;\r\n}\r\n\r\nexport const useSudokuTemplateButton = () => {\r\n  const state = useSelector<IReducer, IStateSudokuTemplateButton>(({ isSudokuTemplateOpen }) => ({\r\n    isSudokuTemplateOpen,\r\n  }));\r\n  const dispatch = useDispatch<Dispatch>();\r\n\r\n  const toggleSudokuTemplate = () => {\r\n    state.isSudokuTemplateOpen ? dispatch(hideSudokuTemplate()) : dispatch(displaySudokuTemplate());\r\n    dispatch(unselectBlock());\r\n  };\r\n  return { toggleSudokuTemplate };\r\n};\r\n","import { S } from 'components';\r\nimport { useSudokuTemplateButton } from './useSudokuTemplateButton';\r\n\r\nexport const SudokuTemplateButton = () => {\r\n  const { toggleSudokuTemplate } = useSudokuTemplateButton();\r\n  return <S.Button onClick={toggleSudokuTemplate}>Import Template</S.Button>;\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport interface INotificationStyled {\r\n  mode: 'warning' | 'success' | 'error' | undefined;\r\n  isVisible?: boolean;\r\n}\r\nexport const NotificationStyled = styled.div<INotificationStyled>`\r\n  ${({ theme, mode, isVisible }) => css`\r\n    width: 90%;\r\n    height: 2rem;\r\n    background-color: ${mode === 'success'\r\n      ? theme.colors.success\r\n      : mode === 'error'\r\n      ? theme.colors.error\r\n      : theme.colors.warning};\r\n    color: ${mode === 'warning' ? 'black' : 'white'};\r\n    font-weight: bold;\r\n    border-radius: ${theme.borderRadius};\r\n    z-index: 100;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    align-self: center;\r\n    box-shadow: ${theme.shadow};\r\n    visibility: ${isVisible ? 'visible' : 'hidden'};\r\n  `}\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { NotificationStyled, INotificationStyled } from './NotificationStyled';\r\n\r\ninterface INotification extends INotificationStyled {\r\n  label: string;\r\n}\r\n\r\nexport const Notification: FC<INotification> = ({ isVisible, label, mode }) => {\r\n  return (\r\n    <NotificationStyled mode={mode} isVisible={isVisible}>\r\n      {label}\r\n    </NotificationStyled>\r\n  );\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n  ${({ theme }) => css`\r\n    align-items: center;\r\n    background-color: ${theme.colors.black};\r\n    border: 0.125rem solid ${theme.colors.black};\r\n    color: ${theme.colors.white};\r\n    cursor: pointer;\r\n    display: flex;\r\n    margin: 0.0625rem;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n    justify-content: center;\r\n    opacity: 0.9;\r\n    transition: ${theme.transition};\r\n    flex: 1;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n\r\n    &:hover {\r\n      opacity: 0.6;\r\n    }\r\n  `}\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n  ${({ theme }) => css`\r\n    background-color: ${theme.colors.white};\r\n    border-radius: ${theme.borderRadius};\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-height: fit-content;\r\n    padding: 1.5rem;\r\n    box-shadow: ${theme.shadow};\r\n  `}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.div`\r\n  height: 100%;\r\n  max-width: 31.25rem;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  position: relative;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.white};\r\n    margin-top: 0;\r\n    text-align: center;\r\n  `}\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const GridContainer = styled.div`\r\n  ${({ theme }) => css`\r\n    display: grid;\r\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n    position: absolute;\r\n    top: calc(100% + 0.125rem);\r\n    z-index: 10;\r\n    background-color: ${theme.colors.white};\r\n    border: solid 0.0625rem ${theme.colors.black};\r\n    padding: 0.25rem;\r\n    box-shadow: ${theme.shadow};\r\n  `}\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const CardTitle = styled.h1`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.black};\r\n    text-align: center;\r\n  `}\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const DefaultText = styled.p`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.black};\r\n    font-size: 1.2rem;\r\n    line-height: 1.6;\r\n    text-align: justify;\r\n  `}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const ContentHorizontal = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  justify-content: space-around;\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { configureStore } from 'store';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme, GlobalStyles } from './global/styles';\r\nimport { MainPane } from './components';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyles />\r\n      <Provider store={store}>\r\n        <MainPane />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nreportWebVitals();\r\n","import { createStore } from 'redux';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\nimport { reducer } from './reducers';\r\n\r\nexport * from './actions';\r\nexport * from './interfaces';\r\n\r\nexport type IReducer = ReturnType<typeof reducer>;\r\n\r\nexport const configureStore = (initialState = {}) => {\r\n  const store = createStore(reducer, initialState, devToolsEnhancer({}));\r\n  return store;\r\n};\r\n","export const theme = {\r\n  colors: {\r\n    background: 'radial-gradient(#00a779, #282c34)',\r\n    black: '#282c34',\r\n    blue: '#a0e9fd',\r\n    lightBlue: '#caf3fe',\r\n    white: '#ffffff',\r\n    darkgray: '#ababab',\r\n    warning: '#ffcd38',\r\n    error: '#f50057',\r\n    success: '#00a152',\r\n  },\r\n  shadow: '0 0.875rem 1.75rem rgba(0,0,0,0.25), 0 0.625rem 0.625rem rgba(0,0,0,0.22)',\r\n  transition: '0.3s',\r\n  borderRadius: '1rem',\r\n};\r\n\r\nexport type themeType = typeof theme;\r\n"],"sourceRoot":""}